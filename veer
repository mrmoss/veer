#!/usr/bin/env python3
'''
Veer - A simple TCP redirector
'''
import argparse
import select
import socket
import sys
import time

def print_debug(debug, data):
    '''
    Only print if debug is enabled
    '''
    if not debug:
        return
    sys.stderr.write(f'{data}\n')
    sys.stderr.flush()

def proxy_sockets(debug, read_sock, write_sock):
    '''
    One way proxy reading bytes from read_socket and sending them to write_socket
    '''
    bytes_read = 0
    try:
        if not read_sock.available():
            return True
        bytes_read = read_sock.recv(4096)
        print_debug(debug, f'Read {len(bytes_read)} bytes {read_sock} > {write_sock}')

    except Exception:
        pass

    if not bytes_read:
        print_debug(debug, f'Connection closed by source {read_sock} > {write_sock}')
        return False

    try:
        nbytes_written = write_sock.send(bytes_read)
        print_debug(debug, f'Sent {nbytes_written} bytes {read_sock} > {write_sock}')
        return nbytes_written == len(bytes_read)

    except Exception:
        print_debug(debug, f'Connection closed by destination {read_sock} > {write_sock}')
        return False

class Socket:
    '''
    Simple Wrapper around an addr/sock
    '''
    def __init__(self, addr, sock=None):
        self.addr = addr
        if sock:
            self.sock = sock
        else:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def __str__(self):
        return f'{self.addr[0]}:{self.addr[1]}'

    def accept(self):
        '''
        Accept connection from passed address
        '''
        return self.sock.accept()

    def available(self):
        '''
        Returns whether there are bytes to read from a given conn or not
        '''
        try:
            readable, _writeable, _errored = select.select([self.sock], [], [], 0)
            return self.sock in readable

        except Exception:
            return False

    def close(self):
        '''
        Closes socket (no throw)
        '''
        try:
            return self.sock.close()
        except Exception:
            return None

    def connect(self):
        '''
        Connect to passed address
        '''
        return self.sock.connect(self.addr)

    def listen(self):
        '''
        Listen on passed address
        '''
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_KEEPALIVE,1)
        self.sock.bind(self.addr)
        return self.sock.listen()

    def recv(self, nbytes):
        '''
        Receive data from passed address
        '''
        return self.sock.recv(nbytes)

    def send(self, data):
        '''
        Send data to passed address
        '''
        return self.sock.send(data)

class RedirectClient:
    '''
    Simple wrapper around a TCP client
    '''
    def __init__(self, debug, src, dst_addr):
        '''
        Keep variables that matter and create connection to dst socket
        '''
        self.debug = debug
        self.src = src
        print_debug(self.debug, f'Connection received on {self.src}')

        self.dst = Socket(dst_addr)
        self.dst.connect()
        print_debug(self.debug, f'Opened redirection connection to {self.dst}')

    def update(self):
        '''
        Proxy both ways and return false/true based on error/success
        '''
        if not proxy_sockets(self.debug, self.src, self.dst):
            return self.close()
        if not proxy_sockets(self.debug, self.dst, self.src):
            return self.close()

        return True

    def close(self):
        '''
        Close both sockets without error
        '''
        self.src.close()
        self.dst.close()
        return False

def main():
    '''
    Main function
    '''
    # Cli arg parse
    parser = argparse.ArgumentParser(description='Veer - A simple TCP redirector')
    parser.add_argument('listen_host', help='Listen host', type=str)
    parser.add_argument('listen_port', help='Listen port', type=int)
    parser.add_argument('redirect_host', help='Redirect host', type=str)
    parser.add_argument('redirect_port', help='Redirect port', type=int)
    parser.add_argument('--verbose', '-v', help='Debug logging', action='store_true')
    args = parser.parse_args()
    debug = args.verbose
    listen_addr = (args.listen_host, args.listen_port)
    redirect_addr = (args.redirect_host, args.redirect_port)

    # Setup listen socket
    listen_sock = Socket(listen_addr)
    listen_sock.listen()

    # Debug
    print_debug(debug, f'Listening on {listen_sock}')
    print_debug(debug, f'Redirecting to {redirect_addr[0]}:{redirect_addr[1]}')

    clients = []

    while True:
        # Add new clients
        if listen_sock.available():
            src_sock, src_addr = listen_sock.accept()
            src = Socket(src_addr, src_sock)
            clients.append(RedirectClient(debug, src, redirect_addr))

        # Serve clients
        remove_inds = []
        for ind, client in enumerate(clients):
            if not client.update():
                remove_inds.append(ind)

        # Remove disconnected clients
        if remove_inds:
            clients = [client for ind, client in enumerate(clients) if ind not in remove_inds]

        # Give CPU a break via sleep
        time.sleep(0.0001)

if __name__ == '__main__':
    main()
